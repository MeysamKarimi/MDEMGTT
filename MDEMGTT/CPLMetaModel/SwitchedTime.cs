//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.CPL
{
    
    
    /// <summary>
    /// The default implementation of the SwitchedTime class
    /// </summary>
    [XmlNamespaceAttribute("http://cpl/1.0")]
    [XmlNamespacePrefixAttribute("CPL")]
    [ModelRepresentationClassAttribute("http://cpl/1.0#//SwitchedTime")]
    public partial class SwitchedTime : NodeContainer, ISwitchedTime, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Dtstart property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _dtstart;
        
        private static Lazy<ITypedElement> _dtstartAttribute = new Lazy<ITypedElement>(RetrieveDtstartAttribute);
        
        /// <summary>
        /// The backing field for the Dtend property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _dtend;
        
        private static Lazy<ITypedElement> _dtendAttribute = new Lazy<ITypedElement>(RetrieveDtendAttribute);
        
        /// <summary>
        /// The backing field for the Duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _duration;
        
        private static Lazy<ITypedElement> _durationAttribute = new Lazy<ITypedElement>(RetrieveDurationAttribute);
        
        /// <summary>
        /// The backing field for the Freq property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _freq;
        
        private static Lazy<ITypedElement> _freqAttribute = new Lazy<ITypedElement>(RetrieveFreqAttribute);
        
        /// <summary>
        /// The backing field for the Until property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _until;
        
        private static Lazy<ITypedElement> _untilAttribute = new Lazy<ITypedElement>(RetrieveUntilAttribute);
        
        /// <summary>
        /// The backing field for the Count property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _count;
        
        private static Lazy<ITypedElement> _countAttribute = new Lazy<ITypedElement>(RetrieveCountAttribute);
        
        /// <summary>
        /// The backing field for the Interval property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _interval;
        
        private static Lazy<ITypedElement> _intervalAttribute = new Lazy<ITypedElement>(RetrieveIntervalAttribute);
        
        /// <summary>
        /// The backing field for the BySecond property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _bySecond;
        
        private static Lazy<ITypedElement> _bySecondAttribute = new Lazy<ITypedElement>(RetrieveBySecondAttribute);
        
        /// <summary>
        /// The backing field for the ByMinute property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _byMinute;
        
        private static Lazy<ITypedElement> _byMinuteAttribute = new Lazy<ITypedElement>(RetrieveByMinuteAttribute);
        
        /// <summary>
        /// The backing field for the ByHour property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _byHour;
        
        private static Lazy<ITypedElement> _byHourAttribute = new Lazy<ITypedElement>(RetrieveByHourAttribute);
        
        /// <summary>
        /// The backing field for the ByDay property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _byDay;
        
        private static Lazy<ITypedElement> _byDayAttribute = new Lazy<ITypedElement>(RetrieveByDayAttribute);
        
        /// <summary>
        /// The backing field for the ByMonthDay property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _byMonthDay;
        
        private static Lazy<ITypedElement> _byMonthDayAttribute = new Lazy<ITypedElement>(RetrieveByMonthDayAttribute);
        
        /// <summary>
        /// The backing field for the ByYearDay property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _byYearDay;
        
        private static Lazy<ITypedElement> _byYearDayAttribute = new Lazy<ITypedElement>(RetrieveByYearDayAttribute);
        
        /// <summary>
        /// The backing field for the ByWeekNo property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _byWeekNo;
        
        private static Lazy<ITypedElement> _byWeekNoAttribute = new Lazy<ITypedElement>(RetrieveByWeekNoAttribute);
        
        /// <summary>
        /// The backing field for the ByMonth property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _byMonth;
        
        private static Lazy<ITypedElement> _byMonthAttribute = new Lazy<ITypedElement>(RetrieveByMonthAttribute);
        
        /// <summary>
        /// The backing field for the Wkst property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _wkst;
        
        private static Lazy<ITypedElement> _wkstAttribute = new Lazy<ITypedElement>(RetrieveWkstAttribute);
        
        /// <summary>
        /// The backing field for the BySetPos property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _bySetPos;
        
        private static Lazy<ITypedElement> _bySetPosAttribute = new Lazy<ITypedElement>(RetrieveBySetPosAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The dtstart property
        /// </summary>
        [DisplayNameAttribute("dtstart")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("dtstart")]
        [XmlAttributeAttribute(true)]
        public string Dtstart
        {
            get
            {
                return this._dtstart;
            }
            set
            {
                if ((this._dtstart != value))
                {
                    string old = this._dtstart;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDtstartChanging(e);
                    this.OnPropertyChanging("Dtstart", e, _dtstartAttribute);
                    this._dtstart = value;
                    this.OnDtstartChanged(e);
                    this.OnPropertyChanged("Dtstart", e, _dtstartAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dtend property
        /// </summary>
        [DisplayNameAttribute("dtend")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("dtend")]
        [XmlAttributeAttribute(true)]
        public string Dtend
        {
            get
            {
                return this._dtend;
            }
            set
            {
                if ((this._dtend != value))
                {
                    string old = this._dtend;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDtendChanging(e);
                    this.OnPropertyChanging("Dtend", e, _dtendAttribute);
                    this._dtend = value;
                    this.OnDtendChanged(e);
                    this.OnPropertyChanged("Dtend", e, _dtendAttribute);
                }
            }
        }
        
        /// <summary>
        /// The duration property
        /// </summary>
        [DisplayNameAttribute("duration")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("duration")]
        [XmlAttributeAttribute(true)]
        public string Duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                if ((this._duration != value))
                {
                    string old = this._duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationChanging(e);
                    this.OnPropertyChanging("Duration", e, _durationAttribute);
                    this._duration = value;
                    this.OnDurationChanged(e);
                    this.OnPropertyChanged("Duration", e, _durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The freq property
        /// </summary>
        [DisplayNameAttribute("freq")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("freq")]
        [XmlAttributeAttribute(true)]
        public string Freq
        {
            get
            {
                return this._freq;
            }
            set
            {
                if ((this._freq != value))
                {
                    string old = this._freq;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFreqChanging(e);
                    this.OnPropertyChanging("Freq", e, _freqAttribute);
                    this._freq = value;
                    this.OnFreqChanged(e);
                    this.OnPropertyChanged("Freq", e, _freqAttribute);
                }
            }
        }
        
        /// <summary>
        /// The until property
        /// </summary>
        [DisplayNameAttribute("until")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("until")]
        [XmlAttributeAttribute(true)]
        public string Until
        {
            get
            {
                return this._until;
            }
            set
            {
                if ((this._until != value))
                {
                    string old = this._until;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUntilChanging(e);
                    this.OnPropertyChanging("Until", e, _untilAttribute);
                    this._until = value;
                    this.OnUntilChanged(e);
                    this.OnPropertyChanged("Until", e, _untilAttribute);
                }
            }
        }
        
        /// <summary>
        /// The count property
        /// </summary>
        [DisplayNameAttribute("count")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("count")]
        [XmlAttributeAttribute(true)]
        public string Count
        {
            get
            {
                return this._count;
            }
            set
            {
                if ((this._count != value))
                {
                    string old = this._count;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCountChanging(e);
                    this.OnPropertyChanging("Count", e, _countAttribute);
                    this._count = value;
                    this.OnCountChanged(e);
                    this.OnPropertyChanged("Count", e, _countAttribute);
                }
            }
        }
        
        /// <summary>
        /// The interval property
        /// </summary>
        [DisplayNameAttribute("interval")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("interval")]
        [XmlAttributeAttribute(true)]
        public string Interval
        {
            get
            {
                return this._interval;
            }
            set
            {
                if ((this._interval != value))
                {
                    string old = this._interval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIntervalChanging(e);
                    this.OnPropertyChanging("Interval", e, _intervalAttribute);
                    this._interval = value;
                    this.OnIntervalChanged(e);
                    this.OnPropertyChanged("Interval", e, _intervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The bySecond property
        /// </summary>
        [DisplayNameAttribute("bySecond")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("bySecond")]
        [XmlAttributeAttribute(true)]
        public string BySecond
        {
            get
            {
                return this._bySecond;
            }
            set
            {
                if ((this._bySecond != value))
                {
                    string old = this._bySecond;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBySecondChanging(e);
                    this.OnPropertyChanging("BySecond", e, _bySecondAttribute);
                    this._bySecond = value;
                    this.OnBySecondChanged(e);
                    this.OnPropertyChanged("BySecond", e, _bySecondAttribute);
                }
            }
        }
        
        /// <summary>
        /// The byMinute property
        /// </summary>
        [DisplayNameAttribute("byMinute")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("byMinute")]
        [XmlAttributeAttribute(true)]
        public string ByMinute
        {
            get
            {
                return this._byMinute;
            }
            set
            {
                if ((this._byMinute != value))
                {
                    string old = this._byMinute;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnByMinuteChanging(e);
                    this.OnPropertyChanging("ByMinute", e, _byMinuteAttribute);
                    this._byMinute = value;
                    this.OnByMinuteChanged(e);
                    this.OnPropertyChanged("ByMinute", e, _byMinuteAttribute);
                }
            }
        }
        
        /// <summary>
        /// The byHour property
        /// </summary>
        [DisplayNameAttribute("byHour")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("byHour")]
        [XmlAttributeAttribute(true)]
        public string ByHour
        {
            get
            {
                return this._byHour;
            }
            set
            {
                if ((this._byHour != value))
                {
                    string old = this._byHour;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnByHourChanging(e);
                    this.OnPropertyChanging("ByHour", e, _byHourAttribute);
                    this._byHour = value;
                    this.OnByHourChanged(e);
                    this.OnPropertyChanged("ByHour", e, _byHourAttribute);
                }
            }
        }
        
        /// <summary>
        /// The byDay property
        /// </summary>
        [DisplayNameAttribute("byDay")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("byDay")]
        [XmlAttributeAttribute(true)]
        public string ByDay
        {
            get
            {
                return this._byDay;
            }
            set
            {
                if ((this._byDay != value))
                {
                    string old = this._byDay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnByDayChanging(e);
                    this.OnPropertyChanging("ByDay", e, _byDayAttribute);
                    this._byDay = value;
                    this.OnByDayChanged(e);
                    this.OnPropertyChanged("ByDay", e, _byDayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The byMonthDay property
        /// </summary>
        [DisplayNameAttribute("byMonthDay")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("byMonthDay")]
        [XmlAttributeAttribute(true)]
        public string ByMonthDay
        {
            get
            {
                return this._byMonthDay;
            }
            set
            {
                if ((this._byMonthDay != value))
                {
                    string old = this._byMonthDay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnByMonthDayChanging(e);
                    this.OnPropertyChanging("ByMonthDay", e, _byMonthDayAttribute);
                    this._byMonthDay = value;
                    this.OnByMonthDayChanged(e);
                    this.OnPropertyChanged("ByMonthDay", e, _byMonthDayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The byYearDay property
        /// </summary>
        [DisplayNameAttribute("byYearDay")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("byYearDay")]
        [XmlAttributeAttribute(true)]
        public string ByYearDay
        {
            get
            {
                return this._byYearDay;
            }
            set
            {
                if ((this._byYearDay != value))
                {
                    string old = this._byYearDay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnByYearDayChanging(e);
                    this.OnPropertyChanging("ByYearDay", e, _byYearDayAttribute);
                    this._byYearDay = value;
                    this.OnByYearDayChanged(e);
                    this.OnPropertyChanged("ByYearDay", e, _byYearDayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The byWeekNo property
        /// </summary>
        [DisplayNameAttribute("byWeekNo")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("byWeekNo")]
        [XmlAttributeAttribute(true)]
        public string ByWeekNo
        {
            get
            {
                return this._byWeekNo;
            }
            set
            {
                if ((this._byWeekNo != value))
                {
                    string old = this._byWeekNo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnByWeekNoChanging(e);
                    this.OnPropertyChanging("ByWeekNo", e, _byWeekNoAttribute);
                    this._byWeekNo = value;
                    this.OnByWeekNoChanged(e);
                    this.OnPropertyChanged("ByWeekNo", e, _byWeekNoAttribute);
                }
            }
        }
        
        /// <summary>
        /// The byMonth property
        /// </summary>
        [DisplayNameAttribute("byMonth")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("byMonth")]
        [XmlAttributeAttribute(true)]
        public string ByMonth
        {
            get
            {
                return this._byMonth;
            }
            set
            {
                if ((this._byMonth != value))
                {
                    string old = this._byMonth;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnByMonthChanging(e);
                    this.OnPropertyChanging("ByMonth", e, _byMonthAttribute);
                    this._byMonth = value;
                    this.OnByMonthChanged(e);
                    this.OnPropertyChanged("ByMonth", e, _byMonthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The wkst property
        /// </summary>
        [DisplayNameAttribute("wkst")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("wkst")]
        [XmlAttributeAttribute(true)]
        public string Wkst
        {
            get
            {
                return this._wkst;
            }
            set
            {
                if ((this._wkst != value))
                {
                    string old = this._wkst;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWkstChanging(e);
                    this.OnPropertyChanging("Wkst", e, _wkstAttribute);
                    this._wkst = value;
                    this.OnWkstChanged(e);
                    this.OnPropertyChanged("Wkst", e, _wkstAttribute);
                }
            }
        }
        
        /// <summary>
        /// The bySetPos property
        /// </summary>
        [DisplayNameAttribute("bySetPos")]
        [CategoryAttribute("SwitchedTime")]
        [XmlElementNameAttribute("bySetPos")]
        [XmlAttributeAttribute(true)]
        public string BySetPos
        {
            get
            {
                return this._bySetPos;
            }
            set
            {
                if ((this._bySetPos != value))
                {
                    string old = this._bySetPos;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBySetPosChanging(e);
                    this.OnPropertyChanging("BySetPos", e, _bySetPosAttribute);
                    this._bySetPos = value;
                    this.OnBySetPosChanged(e);
                    this.OnPropertyChanged("BySetPos", e, _bySetPosAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//SwitchedTime")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Dtstart property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DtstartChanging;
        
        /// <summary>
        /// Gets fired when the Dtstart property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DtstartChanged;
        
        /// <summary>
        /// Gets fired before the Dtend property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DtendChanging;
        
        /// <summary>
        /// Gets fired when the Dtend property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DtendChanged;
        
        /// <summary>
        /// Gets fired before the Duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationChanging;
        
        /// <summary>
        /// Gets fired when the Duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationChanged;
        
        /// <summary>
        /// Gets fired before the Freq property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FreqChanging;
        
        /// <summary>
        /// Gets fired when the Freq property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FreqChanged;
        
        /// <summary>
        /// Gets fired before the Until property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UntilChanging;
        
        /// <summary>
        /// Gets fired when the Until property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UntilChanged;
        
        /// <summary>
        /// Gets fired before the Count property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CountChanging;
        
        /// <summary>
        /// Gets fired when the Count property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CountChanged;
        
        /// <summary>
        /// Gets fired before the Interval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalChanging;
        
        /// <summary>
        /// Gets fired when the Interval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalChanged;
        
        /// <summary>
        /// Gets fired before the BySecond property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BySecondChanging;
        
        /// <summary>
        /// Gets fired when the BySecond property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BySecondChanged;
        
        /// <summary>
        /// Gets fired before the ByMinute property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByMinuteChanging;
        
        /// <summary>
        /// Gets fired when the ByMinute property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByMinuteChanged;
        
        /// <summary>
        /// Gets fired before the ByHour property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByHourChanging;
        
        /// <summary>
        /// Gets fired when the ByHour property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByHourChanged;
        
        /// <summary>
        /// Gets fired before the ByDay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByDayChanging;
        
        /// <summary>
        /// Gets fired when the ByDay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByDayChanged;
        
        /// <summary>
        /// Gets fired before the ByMonthDay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByMonthDayChanging;
        
        /// <summary>
        /// Gets fired when the ByMonthDay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByMonthDayChanged;
        
        /// <summary>
        /// Gets fired before the ByYearDay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByYearDayChanging;
        
        /// <summary>
        /// Gets fired when the ByYearDay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByYearDayChanged;
        
        /// <summary>
        /// Gets fired before the ByWeekNo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByWeekNoChanging;
        
        /// <summary>
        /// Gets fired when the ByWeekNo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByWeekNoChanged;
        
        /// <summary>
        /// Gets fired before the ByMonth property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByMonthChanging;
        
        /// <summary>
        /// Gets fired when the ByMonth property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ByMonthChanged;
        
        /// <summary>
        /// Gets fired before the Wkst property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WkstChanging;
        
        /// <summary>
        /// Gets fired when the Wkst property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WkstChanged;
        
        /// <summary>
        /// Gets fired before the BySetPos property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BySetPosChanging;
        
        /// <summary>
        /// Gets fired when the BySetPos property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BySetPosChanged;
        
        private static ITypedElement RetrieveDtstartAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("dtstart")));
        }
        
        /// <summary>
        /// Raises the DtstartChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDtstartChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DtstartChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DtstartChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDtstartChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DtstartChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDtendAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("dtend")));
        }
        
        /// <summary>
        /// Raises the DtendChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDtendChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DtendChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DtendChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDtendChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DtendChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDurationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("duration")));
        }
        
        /// <summary>
        /// Raises the DurationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFreqAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("freq")));
        }
        
        /// <summary>
        /// Raises the FreqChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFreqChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FreqChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FreqChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFreqChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FreqChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUntilAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("until")));
        }
        
        /// <summary>
        /// Raises the UntilChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUntilChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UntilChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UntilChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUntilChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UntilChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("count")));
        }
        
        /// <summary>
        /// Raises the CountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIntervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("interval")));
        }
        
        /// <summary>
        /// Raises the IntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBySecondAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("bySecond")));
        }
        
        /// <summary>
        /// Raises the BySecondChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBySecondChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BySecondChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BySecondChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBySecondChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BySecondChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveByMinuteAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("byMinute")));
        }
        
        /// <summary>
        /// Raises the ByMinuteChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByMinuteChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByMinuteChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ByMinuteChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByMinuteChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByMinuteChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveByHourAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("byHour")));
        }
        
        /// <summary>
        /// Raises the ByHourChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByHourChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByHourChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ByHourChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByHourChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByHourChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveByDayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("byDay")));
        }
        
        /// <summary>
        /// Raises the ByDayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByDayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByDayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ByDayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByDayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByDayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveByMonthDayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("byMonthDay")));
        }
        
        /// <summary>
        /// Raises the ByMonthDayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByMonthDayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByMonthDayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ByMonthDayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByMonthDayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByMonthDayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveByYearDayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("byYearDay")));
        }
        
        /// <summary>
        /// Raises the ByYearDayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByYearDayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByYearDayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ByYearDayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByYearDayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByYearDayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveByWeekNoAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("byWeekNo")));
        }
        
        /// <summary>
        /// Raises the ByWeekNoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByWeekNoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByWeekNoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ByWeekNoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByWeekNoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByWeekNoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveByMonthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("byMonth")));
        }
        
        /// <summary>
        /// Raises the ByMonthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByMonthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByMonthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ByMonthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnByMonthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ByMonthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWkstAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("wkst")));
        }
        
        /// <summary>
        /// Raises the WkstChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWkstChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WkstChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WkstChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWkstChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WkstChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBySetPosAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedTime.ClassInstance)).Resolve("bySetPos")));
        }
        
        /// <summary>
        /// Raises the BySetPosChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBySetPosChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BySetPosChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BySetPosChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBySetPosChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BySetPosChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DTSTART"))
            {
                return this.Dtstart;
            }
            if ((attribute == "DTEND"))
            {
                return this.Dtend;
            }
            if ((attribute == "DURATION"))
            {
                return this.Duration;
            }
            if ((attribute == "FREQ"))
            {
                return this.Freq;
            }
            if ((attribute == "UNTIL"))
            {
                return this.Until;
            }
            if ((attribute == "COUNT"))
            {
                return this.Count;
            }
            if ((attribute == "INTERVAL"))
            {
                return this.Interval;
            }
            if ((attribute == "BYSECOND"))
            {
                return this.BySecond;
            }
            if ((attribute == "BYMINUTE"))
            {
                return this.ByMinute;
            }
            if ((attribute == "BYHOUR"))
            {
                return this.ByHour;
            }
            if ((attribute == "BYDAY"))
            {
                return this.ByDay;
            }
            if ((attribute == "BYMONTHDAY"))
            {
                return this.ByMonthDay;
            }
            if ((attribute == "BYYEARDAY"))
            {
                return this.ByYearDay;
            }
            if ((attribute == "BYWEEKNO"))
            {
                return this.ByWeekNo;
            }
            if ((attribute == "BYMONTH"))
            {
                return this.ByMonth;
            }
            if ((attribute == "WKST"))
            {
                return this.Wkst;
            }
            if ((attribute == "BYSETPOS"))
            {
                return this.BySetPos;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DTSTART"))
            {
                this.Dtstart = ((string)(value));
                return;
            }
            if ((feature == "DTEND"))
            {
                this.Dtend = ((string)(value));
                return;
            }
            if ((feature == "DURATION"))
            {
                this.Duration = ((string)(value));
                return;
            }
            if ((feature == "FREQ"))
            {
                this.Freq = ((string)(value));
                return;
            }
            if ((feature == "UNTIL"))
            {
                this.Until = ((string)(value));
                return;
            }
            if ((feature == "COUNT"))
            {
                this.Count = ((string)(value));
                return;
            }
            if ((feature == "INTERVAL"))
            {
                this.Interval = ((string)(value));
                return;
            }
            if ((feature == "BYSECOND"))
            {
                this.BySecond = ((string)(value));
                return;
            }
            if ((feature == "BYMINUTE"))
            {
                this.ByMinute = ((string)(value));
                return;
            }
            if ((feature == "BYHOUR"))
            {
                this.ByHour = ((string)(value));
                return;
            }
            if ((feature == "BYDAY"))
            {
                this.ByDay = ((string)(value));
                return;
            }
            if ((feature == "BYMONTHDAY"))
            {
                this.ByMonthDay = ((string)(value));
                return;
            }
            if ((feature == "BYYEARDAY"))
            {
                this.ByYearDay = ((string)(value));
                return;
            }
            if ((feature == "BYWEEKNO"))
            {
                this.ByWeekNo = ((string)(value));
                return;
            }
            if ((feature == "BYMONTH"))
            {
                this.ByMonth = ((string)(value));
                return;
            }
            if ((feature == "WKST"))
            {
                this.Wkst = ((string)(value));
                return;
            }
            if ((feature == "BYSETPOS"))
            {
                this.BySetPos = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DTSTART"))
            {
                return new DtstartProxy(this);
            }
            if ((attribute == "DTEND"))
            {
                return new DtendProxy(this);
            }
            if ((attribute == "DURATION"))
            {
                return new DurationProxy(this);
            }
            if ((attribute == "FREQ"))
            {
                return new FreqProxy(this);
            }
            if ((attribute == "UNTIL"))
            {
                return new UntilProxy(this);
            }
            if ((attribute == "COUNT"))
            {
                return new CountProxy(this);
            }
            if ((attribute == "INTERVAL"))
            {
                return new IntervalProxy(this);
            }
            if ((attribute == "BYSECOND"))
            {
                return new BySecondProxy(this);
            }
            if ((attribute == "BYMINUTE"))
            {
                return new ByMinuteProxy(this);
            }
            if ((attribute == "BYHOUR"))
            {
                return new ByHourProxy(this);
            }
            if ((attribute == "BYDAY"))
            {
                return new ByDayProxy(this);
            }
            if ((attribute == "BYMONTHDAY"))
            {
                return new ByMonthDayProxy(this);
            }
            if ((attribute == "BYYEARDAY"))
            {
                return new ByYearDayProxy(this);
            }
            if ((attribute == "BYWEEKNO"))
            {
                return new ByWeekNoProxy(this);
            }
            if ((attribute == "BYMONTH"))
            {
                return new ByMonthProxy(this);
            }
            if ((attribute == "WKST"))
            {
                return new WkstProxy(this);
            }
            if ((attribute == "BYSETPOS"))
            {
                return new BySetPosProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//SwitchedTime")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dtstart property
        /// </summary>
        private sealed class DtstartProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DtstartProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "dtstart")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dtstart;
                }
                set
                {
                    this.ModelElement.Dtstart = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dtend property
        /// </summary>
        private sealed class DtendProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DtendProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "dtend")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Dtend;
                }
                set
                {
                    this.ModelElement.Dtend = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the duration property
        /// </summary>
        private sealed class DurationProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Duration;
                }
                set
                {
                    this.ModelElement.Duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the freq property
        /// </summary>
        private sealed class FreqProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FreqProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "freq")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Freq;
                }
                set
                {
                    this.ModelElement.Freq = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the until property
        /// </summary>
        private sealed class UntilProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UntilProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "until")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Until;
                }
                set
                {
                    this.ModelElement.Until = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the count property
        /// </summary>
        private sealed class CountProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CountProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "count")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Count;
                }
                set
                {
                    this.ModelElement.Count = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the interval property
        /// </summary>
        private sealed class IntervalProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IntervalProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "interval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Interval;
                }
                set
                {
                    this.ModelElement.Interval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bySecond property
        /// </summary>
        private sealed class BySecondProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BySecondProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "bySecond")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BySecond;
                }
                set
                {
                    this.ModelElement.BySecond = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the byMinute property
        /// </summary>
        private sealed class ByMinuteProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ByMinuteProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "byMinute")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ByMinute;
                }
                set
                {
                    this.ModelElement.ByMinute = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the byHour property
        /// </summary>
        private sealed class ByHourProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ByHourProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "byHour")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ByHour;
                }
                set
                {
                    this.ModelElement.ByHour = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the byDay property
        /// </summary>
        private sealed class ByDayProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ByDayProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "byDay")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ByDay;
                }
                set
                {
                    this.ModelElement.ByDay = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the byMonthDay property
        /// </summary>
        private sealed class ByMonthDayProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ByMonthDayProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "byMonthDay")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ByMonthDay;
                }
                set
                {
                    this.ModelElement.ByMonthDay = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the byYearDay property
        /// </summary>
        private sealed class ByYearDayProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ByYearDayProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "byYearDay")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ByYearDay;
                }
                set
                {
                    this.ModelElement.ByYearDay = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the byWeekNo property
        /// </summary>
        private sealed class ByWeekNoProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ByWeekNoProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "byWeekNo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ByWeekNo;
                }
                set
                {
                    this.ModelElement.ByWeekNo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the byMonth property
        /// </summary>
        private sealed class ByMonthProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ByMonthProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "byMonth")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ByMonth;
                }
                set
                {
                    this.ModelElement.ByMonth = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the wkst property
        /// </summary>
        private sealed class WkstProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WkstProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "wkst")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Wkst;
                }
                set
                {
                    this.ModelElement.Wkst = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bySetPos property
        /// </summary>
        private sealed class BySetPosProxy : ModelPropertyChange<ISwitchedTime, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BySetPosProxy(ISwitchedTime modelElement) : 
                    base(modelElement, "bySetPos")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BySetPos;
                }
                set
                {
                    this.ModelElement.BySetPos = value;
                }
            }
        }
    }
}

