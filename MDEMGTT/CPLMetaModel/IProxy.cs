//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.CPL
{
    
    
    /// <summary>
    /// The public interface for Proxy
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Proxy))]
    [XmlDefaultImplementationTypeAttribute(typeof(Proxy))]
    [ModelRepresentationClassAttribute("http://cpl/1.0#//Proxy")]
    public interface IProxy : IModelElement, ISignallingAction
    {
        
        /// <summary>
        /// The timeout property
        /// </summary>
        [DisplayNameAttribute("timeout")]
        [CategoryAttribute("Proxy")]
        [XmlElementNameAttribute("timeout")]
        [XmlAttributeAttribute(true)]
        string Timeout
        {
            get;
            set;
        }
        
        /// <summary>
        /// The recurse property
        /// </summary>
        [DisplayNameAttribute("recurse")]
        [CategoryAttribute("Proxy")]
        [XmlElementNameAttribute("recurse")]
        [XmlAttributeAttribute(true)]
        string Recurse
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ordering property
        /// </summary>
        [DisplayNameAttribute("ordering")]
        [CategoryAttribute("Proxy")]
        [XmlElementNameAttribute("ordering")]
        [XmlAttributeAttribute(true)]
        string Ordering
        {
            get;
            set;
        }
        
        /// <summary>
        /// The busy property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("busy")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IBusy Busy
        {
            get;
            set;
        }
        
        /// <summary>
        /// The noAnswer property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("noAnswer")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        INoAnswer NoAnswer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The redirection property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("redirection")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IRedirection Redirection
        {
            get;
            set;
        }
        
        /// <summary>
        /// The failure property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("failure")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IFailure Failure
        {
            get;
            set;
        }
        
        /// <summary>
        /// The default property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("default")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        IDefault Default
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Timeout property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeoutChanging;
        
        /// <summary>
        /// Gets fired when the Timeout property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeoutChanged;
        
        /// <summary>
        /// Gets fired before the Recurse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RecurseChanging;
        
        /// <summary>
        /// Gets fired when the Recurse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RecurseChanged;
        
        /// <summary>
        /// Gets fired before the Ordering property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OrderingChanging;
        
        /// <summary>
        /// Gets fired when the Ordering property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OrderingChanged;
        
        /// <summary>
        /// Gets fired before the Busy property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BusyChanging;
        
        /// <summary>
        /// Gets fired when the Busy property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BusyChanged;
        
        /// <summary>
        /// Gets fired before the NoAnswer property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NoAnswerChanging;
        
        /// <summary>
        /// Gets fired when the NoAnswer property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NoAnswerChanged;
        
        /// <summary>
        /// Gets fired before the Redirection property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RedirectionChanging;
        
        /// <summary>
        /// Gets fired when the Redirection property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RedirectionChanged;
        
        /// <summary>
        /// Gets fired before the Failure property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailureChanging;
        
        /// <summary>
        /// Gets fired when the Failure property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailureChanged;
        
        /// <summary>
        /// Gets fired before the Default property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultChanging;
        
        /// <summary>
        /// Gets fired when the Default property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultChanged;
    }
}

