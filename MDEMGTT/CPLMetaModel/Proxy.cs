//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.CPL
{
    
    
    /// <summary>
    /// The default implementation of the Proxy class
    /// </summary>
    [XmlNamespaceAttribute("http://cpl/1.0")]
    [XmlNamespacePrefixAttribute("CPL")]
    [ModelRepresentationClassAttribute("http://cpl/1.0#//Proxy")]
    public partial class Proxy : SignallingAction, IProxy, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Timeout property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _timeout;
        
        private static Lazy<ITypedElement> _timeoutAttribute = new Lazy<ITypedElement>(RetrieveTimeoutAttribute);
        
        /// <summary>
        /// The backing field for the Recurse property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _recurse;
        
        private static Lazy<ITypedElement> _recurseAttribute = new Lazy<ITypedElement>(RetrieveRecurseAttribute);
        
        /// <summary>
        /// The backing field for the Ordering property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _ordering;
        
        private static Lazy<ITypedElement> _orderingAttribute = new Lazy<ITypedElement>(RetrieveOrderingAttribute);
        
        private static Lazy<ITypedElement> _busyReference = new Lazy<ITypedElement>(RetrieveBusyReference);
        
        /// <summary>
        /// The backing field for the Busy property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IBusy _busy;
        
        private static Lazy<ITypedElement> _noAnswerReference = new Lazy<ITypedElement>(RetrieveNoAnswerReference);
        
        /// <summary>
        /// The backing field for the NoAnswer property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private INoAnswer _noAnswer;
        
        private static Lazy<ITypedElement> _redirectionReference = new Lazy<ITypedElement>(RetrieveRedirectionReference);
        
        /// <summary>
        /// The backing field for the Redirection property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IRedirection _redirection;
        
        private static Lazy<ITypedElement> _failureReference = new Lazy<ITypedElement>(RetrieveFailureReference);
        
        /// <summary>
        /// The backing field for the Failure property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IFailure _failure;
        
        private static Lazy<ITypedElement> _defaultReference = new Lazy<ITypedElement>(RetrieveDefaultReference);
        
        /// <summary>
        /// The backing field for the Default property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IDefault _default;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The timeout property
        /// </summary>
        [DisplayNameAttribute("timeout")]
        [CategoryAttribute("Proxy")]
        [XmlElementNameAttribute("timeout")]
        [XmlAttributeAttribute(true)]
        public string Timeout
        {
            get
            {
                return this._timeout;
            }
            set
            {
                if ((this._timeout != value))
                {
                    string old = this._timeout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeoutChanging(e);
                    this.OnPropertyChanging("Timeout", e, _timeoutAttribute);
                    this._timeout = value;
                    this.OnTimeoutChanged(e);
                    this.OnPropertyChanged("Timeout", e, _timeoutAttribute);
                }
            }
        }
        
        /// <summary>
        /// The recurse property
        /// </summary>
        [DisplayNameAttribute("recurse")]
        [CategoryAttribute("Proxy")]
        [XmlElementNameAttribute("recurse")]
        [XmlAttributeAttribute(true)]
        public string Recurse
        {
            get
            {
                return this._recurse;
            }
            set
            {
                if ((this._recurse != value))
                {
                    string old = this._recurse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRecurseChanging(e);
                    this.OnPropertyChanging("Recurse", e, _recurseAttribute);
                    this._recurse = value;
                    this.OnRecurseChanged(e);
                    this.OnPropertyChanged("Recurse", e, _recurseAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ordering property
        /// </summary>
        [DisplayNameAttribute("ordering")]
        [CategoryAttribute("Proxy")]
        [XmlElementNameAttribute("ordering")]
        [XmlAttributeAttribute(true)]
        public string Ordering
        {
            get
            {
                return this._ordering;
            }
            set
            {
                if ((this._ordering != value))
                {
                    string old = this._ordering;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOrderingChanging(e);
                    this.OnPropertyChanging("Ordering", e, _orderingAttribute);
                    this._ordering = value;
                    this.OnOrderingChanged(e);
                    this.OnPropertyChanged("Ordering", e, _orderingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The busy property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("busy")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IBusy Busy
        {
            get
            {
                return this._busy;
            }
            set
            {
                if ((this._busy != value))
                {
                    IBusy old = this._busy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBusyChanging(e);
                    this.OnPropertyChanging("Busy", e, _busyReference);
                    this._busy = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetBusy;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetBusy;
                    }
                    this.OnBusyChanged(e);
                    this.OnPropertyChanged("Busy", e, _busyReference);
                }
            }
        }
        
        /// <summary>
        /// The noAnswer property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("noAnswer")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public INoAnswer NoAnswer
        {
            get
            {
                return this._noAnswer;
            }
            set
            {
                if ((this._noAnswer != value))
                {
                    INoAnswer old = this._noAnswer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNoAnswerChanging(e);
                    this.OnPropertyChanging("NoAnswer", e, _noAnswerReference);
                    this._noAnswer = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetNoAnswer;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetNoAnswer;
                    }
                    this.OnNoAnswerChanged(e);
                    this.OnPropertyChanged("NoAnswer", e, _noAnswerReference);
                }
            }
        }
        
        /// <summary>
        /// The redirection property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("redirection")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IRedirection Redirection
        {
            get
            {
                return this._redirection;
            }
            set
            {
                if ((this._redirection != value))
                {
                    IRedirection old = this._redirection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRedirectionChanging(e);
                    this.OnPropertyChanging("Redirection", e, _redirectionReference);
                    this._redirection = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetRedirection;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetRedirection;
                    }
                    this.OnRedirectionChanged(e);
                    this.OnPropertyChanged("Redirection", e, _redirectionReference);
                }
            }
        }
        
        /// <summary>
        /// The failure property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("failure")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IFailure Failure
        {
            get
            {
                return this._failure;
            }
            set
            {
                if ((this._failure != value))
                {
                    IFailure old = this._failure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailureChanging(e);
                    this.OnPropertyChanging("Failure", e, _failureReference);
                    this._failure = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetFailure;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetFailure;
                    }
                    this.OnFailureChanged(e);
                    this.OnPropertyChanged("Failure", e, _failureReference);
                }
            }
        }
        
        /// <summary>
        /// The default property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("default")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IDefault Default
        {
            get
            {
                return this._default;
            }
            set
            {
                if ((this._default != value))
                {
                    IDefault old = this._default;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDefaultChanging(e);
                    this.OnPropertyChanging("Default", e, _defaultReference);
                    this._default = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetDefault;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetDefault;
                    }
                    this.OnDefaultChanged(e);
                    this.OnPropertyChanged("Default", e, _defaultReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ProxyChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProxyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//Proxy")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Timeout property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeoutChanging;
        
        /// <summary>
        /// Gets fired when the Timeout property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeoutChanged;
        
        /// <summary>
        /// Gets fired before the Recurse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RecurseChanging;
        
        /// <summary>
        /// Gets fired when the Recurse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RecurseChanged;
        
        /// <summary>
        /// Gets fired before the Ordering property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrderingChanging;
        
        /// <summary>
        /// Gets fired when the Ordering property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrderingChanged;
        
        /// <summary>
        /// Gets fired before the Busy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BusyChanging;
        
        /// <summary>
        /// Gets fired when the Busy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BusyChanged;
        
        /// <summary>
        /// Gets fired before the NoAnswer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoAnswerChanging;
        
        /// <summary>
        /// Gets fired when the NoAnswer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoAnswerChanged;
        
        /// <summary>
        /// Gets fired before the Redirection property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RedirectionChanging;
        
        /// <summary>
        /// Gets fired when the Redirection property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RedirectionChanged;
        
        /// <summary>
        /// Gets fired before the Failure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureChanging;
        
        /// <summary>
        /// Gets fired when the Failure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureChanged;
        
        /// <summary>
        /// Gets fired before the Default property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultChanging;
        
        /// <summary>
        /// Gets fired when the Default property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultChanged;
        
        private static ITypedElement RetrieveTimeoutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Proxy.ClassInstance)).Resolve("timeout")));
        }
        
        /// <summary>
        /// Raises the TimeoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRecurseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Proxy.ClassInstance)).Resolve("recurse")));
        }
        
        /// <summary>
        /// Raises the RecurseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecurseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RecurseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RecurseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecurseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RecurseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOrderingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Proxy.ClassInstance)).Resolve("ordering")));
        }
        
        /// <summary>
        /// Raises the OrderingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrderingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrderingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OrderingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrderingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrderingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBusyReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Proxy.ClassInstance)).Resolve("busy")));
        }
        
        /// <summary>
        /// Raises the BusyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBusyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BusyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BusyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBusyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BusyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Busy property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBusy(object sender, System.EventArgs eventArgs)
        {
            this.Busy = null;
        }
        
        private static ITypedElement RetrieveNoAnswerReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Proxy.ClassInstance)).Resolve("noAnswer")));
        }
        
        /// <summary>
        /// Raises the NoAnswerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoAnswerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoAnswerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NoAnswerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoAnswerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoAnswerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NoAnswer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNoAnswer(object sender, System.EventArgs eventArgs)
        {
            this.NoAnswer = null;
        }
        
        private static ITypedElement RetrieveRedirectionReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Proxy.ClassInstance)).Resolve("redirection")));
        }
        
        /// <summary>
        /// Raises the RedirectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRedirectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RedirectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RedirectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRedirectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RedirectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Redirection property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRedirection(object sender, System.EventArgs eventArgs)
        {
            this.Redirection = null;
        }
        
        private static ITypedElement RetrieveFailureReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Proxy.ClassInstance)).Resolve("failure")));
        }
        
        /// <summary>
        /// Raises the FailureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Failure property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFailure(object sender, System.EventArgs eventArgs)
        {
            this.Failure = null;
        }
        
        private static ITypedElement RetrieveDefaultReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Proxy.ClassInstance)).Resolve("default")));
        }
        
        /// <summary>
        /// Raises the DefaultChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Default property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDefault(object sender, System.EventArgs eventArgs)
        {
            this.Default = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Busy))
            {
                return ModelHelper.CreatePath("Busy");
            }
            if ((element == this.NoAnswer))
            {
                return ModelHelper.CreatePath("NoAnswer");
            }
            if ((element == this.Redirection))
            {
                return ModelHelper.CreatePath("Redirection");
            }
            if ((element == this.Failure))
            {
                return ModelHelper.CreatePath("Failure");
            }
            if ((element == this.Default))
            {
                return ModelHelper.CreatePath("Default");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "BUSY"))
            {
                return this.Busy;
            }
            if ((reference == "NOANSWER"))
            {
                return this.NoAnswer;
            }
            if ((reference == "REDIRECTION"))
            {
                return this.Redirection;
            }
            if ((reference == "FAILURE"))
            {
                return this.Failure;
            }
            if ((reference == "DEFAULT"))
            {
                return this.Default;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TIMEOUT"))
            {
                return this.Timeout;
            }
            if ((attribute == "RECURSE"))
            {
                return this.Recurse;
            }
            if ((attribute == "ORDERING"))
            {
                return this.Ordering;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BUSY"))
            {
                this.Busy = ((IBusy)(value));
                return;
            }
            if ((feature == "NOANSWER"))
            {
                this.NoAnswer = ((INoAnswer)(value));
                return;
            }
            if ((feature == "REDIRECTION"))
            {
                this.Redirection = ((IRedirection)(value));
                return;
            }
            if ((feature == "FAILURE"))
            {
                this.Failure = ((IFailure)(value));
                return;
            }
            if ((feature == "DEFAULT"))
            {
                this.Default = ((IDefault)(value));
                return;
            }
            if ((feature == "TIMEOUT"))
            {
                this.Timeout = ((string)(value));
                return;
            }
            if ((feature == "RECURSE"))
            {
                this.Recurse = ((string)(value));
                return;
            }
            if ((feature == "ORDERING"))
            {
                this.Ordering = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TIMEOUT"))
            {
                return new TimeoutProxy(this);
            }
            if ((attribute == "RECURSE"))
            {
                return new RecurseProxy(this);
            }
            if ((attribute == "ORDERING"))
            {
                return new OrderingProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BUSY"))
            {
                return new BusyProxy(this);
            }
            if ((reference == "NOANSWER"))
            {
                return new NoAnswerProxy(this);
            }
            if ((reference == "REDIRECTION"))
            {
                return new RedirectionProxy(this);
            }
            if ((reference == "FAILURE"))
            {
                return new FailureProxy(this);
            }
            if ((reference == "DEFAULT"))
            {
                return new DefaultProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//Proxy")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Proxy class
        /// </summary>
        public class ProxyChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Proxy _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProxyChildrenCollection(Proxy parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Busy != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NoAnswer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Redirection != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Failure != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Default != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BusyChanged += this.PropagateValueChanges;
                this._parent.NoAnswerChanged += this.PropagateValueChanges;
                this._parent.RedirectionChanged += this.PropagateValueChanges;
                this._parent.FailureChanged += this.PropagateValueChanges;
                this._parent.DefaultChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BusyChanged -= this.PropagateValueChanges;
                this._parent.NoAnswerChanged -= this.PropagateValueChanges;
                this._parent.RedirectionChanged -= this.PropagateValueChanges;
                this._parent.FailureChanged -= this.PropagateValueChanges;
                this._parent.DefaultChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Busy == null))
                {
                    IBusy busyCasted = item.As<IBusy>();
                    if ((busyCasted != null))
                    {
                        this._parent.Busy = busyCasted;
                        return;
                    }
                }
                if ((this._parent.NoAnswer == null))
                {
                    INoAnswer noAnswerCasted = item.As<INoAnswer>();
                    if ((noAnswerCasted != null))
                    {
                        this._parent.NoAnswer = noAnswerCasted;
                        return;
                    }
                }
                if ((this._parent.Redirection == null))
                {
                    IRedirection redirectionCasted = item.As<IRedirection>();
                    if ((redirectionCasted != null))
                    {
                        this._parent.Redirection = redirectionCasted;
                        return;
                    }
                }
                if ((this._parent.Failure == null))
                {
                    IFailure failureCasted = item.As<IFailure>();
                    if ((failureCasted != null))
                    {
                        this._parent.Failure = failureCasted;
                        return;
                    }
                }
                if ((this._parent.Default == null))
                {
                    IDefault defaultCasted = item.As<IDefault>();
                    if ((defaultCasted != null))
                    {
                        this._parent.Default = defaultCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Busy = null;
                this._parent.NoAnswer = null;
                this._parent.Redirection = null;
                this._parent.Failure = null;
                this._parent.Default = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Busy))
                {
                    return true;
                }
                if ((item == this._parent.NoAnswer))
                {
                    return true;
                }
                if ((item == this._parent.Redirection))
                {
                    return true;
                }
                if ((item == this._parent.Failure))
                {
                    return true;
                }
                if ((item == this._parent.Default))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Busy != null))
                {
                    array[arrayIndex] = this._parent.Busy;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NoAnswer != null))
                {
                    array[arrayIndex] = this._parent.NoAnswer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Redirection != null))
                {
                    array[arrayIndex] = this._parent.Redirection;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Failure != null))
                {
                    array[arrayIndex] = this._parent.Failure;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Default != null))
                {
                    array[arrayIndex] = this._parent.Default;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Busy == item))
                {
                    this._parent.Busy = null;
                    return true;
                }
                if ((this._parent.NoAnswer == item))
                {
                    this._parent.NoAnswer = null;
                    return true;
                }
                if ((this._parent.Redirection == item))
                {
                    this._parent.Redirection = null;
                    return true;
                }
                if ((this._parent.Failure == item))
                {
                    this._parent.Failure = null;
                    return true;
                }
                if ((this._parent.Default == item))
                {
                    this._parent.Default = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Busy).Concat(this._parent.NoAnswer).Concat(this._parent.Redirection).Concat(this._parent.Failure).Concat(this._parent.Default).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Proxy class
        /// </summary>
        public class ProxyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Proxy _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProxyReferencedElementsCollection(Proxy parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Busy != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NoAnswer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Redirection != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Failure != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Default != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BusyChanged += this.PropagateValueChanges;
                this._parent.NoAnswerChanged += this.PropagateValueChanges;
                this._parent.RedirectionChanged += this.PropagateValueChanges;
                this._parent.FailureChanged += this.PropagateValueChanges;
                this._parent.DefaultChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BusyChanged -= this.PropagateValueChanges;
                this._parent.NoAnswerChanged -= this.PropagateValueChanges;
                this._parent.RedirectionChanged -= this.PropagateValueChanges;
                this._parent.FailureChanged -= this.PropagateValueChanges;
                this._parent.DefaultChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Busy == null))
                {
                    IBusy busyCasted = item.As<IBusy>();
                    if ((busyCasted != null))
                    {
                        this._parent.Busy = busyCasted;
                        return;
                    }
                }
                if ((this._parent.NoAnswer == null))
                {
                    INoAnswer noAnswerCasted = item.As<INoAnswer>();
                    if ((noAnswerCasted != null))
                    {
                        this._parent.NoAnswer = noAnswerCasted;
                        return;
                    }
                }
                if ((this._parent.Redirection == null))
                {
                    IRedirection redirectionCasted = item.As<IRedirection>();
                    if ((redirectionCasted != null))
                    {
                        this._parent.Redirection = redirectionCasted;
                        return;
                    }
                }
                if ((this._parent.Failure == null))
                {
                    IFailure failureCasted = item.As<IFailure>();
                    if ((failureCasted != null))
                    {
                        this._parent.Failure = failureCasted;
                        return;
                    }
                }
                if ((this._parent.Default == null))
                {
                    IDefault defaultCasted = item.As<IDefault>();
                    if ((defaultCasted != null))
                    {
                        this._parent.Default = defaultCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Busy = null;
                this._parent.NoAnswer = null;
                this._parent.Redirection = null;
                this._parent.Failure = null;
                this._parent.Default = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Busy))
                {
                    return true;
                }
                if ((item == this._parent.NoAnswer))
                {
                    return true;
                }
                if ((item == this._parent.Redirection))
                {
                    return true;
                }
                if ((item == this._parent.Failure))
                {
                    return true;
                }
                if ((item == this._parent.Default))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Busy != null))
                {
                    array[arrayIndex] = this._parent.Busy;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NoAnswer != null))
                {
                    array[arrayIndex] = this._parent.NoAnswer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Redirection != null))
                {
                    array[arrayIndex] = this._parent.Redirection;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Failure != null))
                {
                    array[arrayIndex] = this._parent.Failure;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Default != null))
                {
                    array[arrayIndex] = this._parent.Default;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Busy == item))
                {
                    this._parent.Busy = null;
                    return true;
                }
                if ((this._parent.NoAnswer == item))
                {
                    this._parent.NoAnswer = null;
                    return true;
                }
                if ((this._parent.Redirection == item))
                {
                    this._parent.Redirection = null;
                    return true;
                }
                if ((this._parent.Failure == item))
                {
                    this._parent.Failure = null;
                    return true;
                }
                if ((this._parent.Default == item))
                {
                    this._parent.Default = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Busy).Concat(this._parent.NoAnswer).Concat(this._parent.Redirection).Concat(this._parent.Failure).Concat(this._parent.Default).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeout property
        /// </summary>
        private sealed class TimeoutProxy : ModelPropertyChange<IProxy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeoutProxy(IProxy modelElement) : 
                    base(modelElement, "timeout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Timeout;
                }
                set
                {
                    this.ModelElement.Timeout = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the recurse property
        /// </summary>
        private sealed class RecurseProxy : ModelPropertyChange<IProxy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RecurseProxy(IProxy modelElement) : 
                    base(modelElement, "recurse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Recurse;
                }
                set
                {
                    this.ModelElement.Recurse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ordering property
        /// </summary>
        private sealed class OrderingProxy : ModelPropertyChange<IProxy, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OrderingProxy(IProxy modelElement) : 
                    base(modelElement, "ordering")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Ordering;
                }
                set
                {
                    this.ModelElement.Ordering = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the busy property
        /// </summary>
        private sealed class BusyProxy : ModelPropertyChange<IProxy, IBusy>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BusyProxy(IProxy modelElement) : 
                    base(modelElement, "busy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBusy Value
            {
                get
                {
                    return this.ModelElement.Busy;
                }
                set
                {
                    this.ModelElement.Busy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the noAnswer property
        /// </summary>
        private sealed class NoAnswerProxy : ModelPropertyChange<IProxy, INoAnswer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NoAnswerProxy(IProxy modelElement) : 
                    base(modelElement, "noAnswer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override INoAnswer Value
            {
                get
                {
                    return this.ModelElement.NoAnswer;
                }
                set
                {
                    this.ModelElement.NoAnswer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the redirection property
        /// </summary>
        private sealed class RedirectionProxy : ModelPropertyChange<IProxy, IRedirection>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RedirectionProxy(IProxy modelElement) : 
                    base(modelElement, "redirection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRedirection Value
            {
                get
                {
                    return this.ModelElement.Redirection;
                }
                set
                {
                    this.ModelElement.Redirection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the failure property
        /// </summary>
        private sealed class FailureProxy : ModelPropertyChange<IProxy, IFailure>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailureProxy(IProxy modelElement) : 
                    base(modelElement, "failure")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFailure Value
            {
                get
                {
                    return this.ModelElement.Failure;
                }
                set
                {
                    this.ModelElement.Failure = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the default property
        /// </summary>
        private sealed class DefaultProxy : ModelPropertyChange<IProxy, IDefault>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultProxy(IProxy modelElement) : 
                    base(modelElement, "default")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDefault Value
            {
                get
                {
                    return this.ModelElement.Default;
                }
                set
                {
                    this.ModelElement.Default = value;
                }
            }
        }
    }
}

