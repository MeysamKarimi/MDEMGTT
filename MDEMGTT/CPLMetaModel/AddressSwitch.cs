//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.CPL
{
    
    
    /// <summary>
    /// The default implementation of the AddressSwitch class
    /// </summary>
    [XmlNamespaceAttribute("http://cpl/1.0")]
    [XmlNamespacePrefixAttribute("CPL")]
    [ModelRepresentationClassAttribute("http://cpl/1.0#//AddressSwitch")]
    public partial class AddressSwitch : Switch, IAddressSwitch, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Field property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _field;
        
        private static Lazy<ITypedElement> _fieldAttribute = new Lazy<ITypedElement>(RetrieveFieldAttribute);
        
        /// <summary>
        /// The backing field for the SubField property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _subField;
        
        private static Lazy<ITypedElement> _subFieldAttribute = new Lazy<ITypedElement>(RetrieveSubFieldAttribute);
        
        private static Lazy<ITypedElement> _addressesReference = new Lazy<ITypedElement>(RetrieveAddressesReference);
        
        /// <summary>
        /// The backing field for the Addresses property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableCompositionOrderedSet<ISwitchedAddress> _addresses;
        
        private static IClass _classInstance;
        
        public AddressSwitch()
        {
            this._addresses = new ObservableCompositionOrderedSet<ISwitchedAddress>(this);
            this._addresses.CollectionChanging += this.AddressesCollectionChanging;
            this._addresses.CollectionChanged += this.AddressesCollectionChanged;
        }
        
        /// <summary>
        /// The field property
        /// </summary>
        [DisplayNameAttribute("field")]
        [CategoryAttribute("AddressSwitch")]
        [XmlElementNameAttribute("field")]
        [XmlAttributeAttribute(true)]
        public string Field
        {
            get
            {
                return this._field;
            }
            set
            {
                if ((this._field != value))
                {
                    string old = this._field;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFieldChanging(e);
                    this.OnPropertyChanging("Field", e, _fieldAttribute);
                    this._field = value;
                    this.OnFieldChanged(e);
                    this.OnPropertyChanged("Field", e, _fieldAttribute);
                }
            }
        }
        
        /// <summary>
        /// The subField property
        /// </summary>
        [DisplayNameAttribute("subField")]
        [CategoryAttribute("AddressSwitch")]
        [XmlElementNameAttribute("subField")]
        [XmlAttributeAttribute(true)]
        public string SubField
        {
            get
            {
                return this._subField;
            }
            set
            {
                if ((this._subField != value))
                {
                    string old = this._subField;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubFieldChanging(e);
                    this.OnPropertyChanging("SubField", e, _subFieldAttribute);
                    this._subField = value;
                    this.OnSubFieldChanged(e);
                    this.OnPropertyChanged("SubField", e, _subFieldAttribute);
                }
            }
        }
        
        /// <summary>
        /// The addresses property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("addresses")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IOrderedSetExpression<ISwitchedAddress> Addresses
        {
            get
            {
                return this._addresses;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AddressSwitchChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AddressSwitchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//AddressSwitch")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Field property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FieldChanging;
        
        /// <summary>
        /// Gets fired when the Field property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FieldChanged;
        
        /// <summary>
        /// Gets fired before the SubField property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubFieldChanging;
        
        /// <summary>
        /// Gets fired when the SubField property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubFieldChanged;
        
        private static ITypedElement RetrieveFieldAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.AddressSwitch.ClassInstance)).Resolve("field")));
        }
        
        /// <summary>
        /// Raises the FieldChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFieldChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FieldChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FieldChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFieldChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FieldChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSubFieldAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.AddressSwitch.ClassInstance)).Resolve("subField")));
        }
        
        /// <summary>
        /// Raises the SubFieldChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubFieldChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubFieldChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubFieldChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubFieldChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubFieldChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAddressesReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.AddressSwitch.ClassInstance)).Resolve("addresses")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Addresses property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AddressesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Addresses", e, _addressesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Addresses property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AddressesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Addresses", e, _addressesReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int addressesIndex = ModelHelper.IndexOfReference(this.Addresses, element);
            if ((addressesIndex != -1))
            {
                return ModelHelper.CreatePath("addresses", addressesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ADDRESSES"))
            {
                if ((index < this.Addresses.Count))
                {
                    return this.Addresses[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FIELD"))
            {
                return this.Field;
            }
            if ((attribute == "SUBFIELD"))
            {
                return this.SubField;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ADDRESSES"))
            {
                return this._addresses;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FIELD"))
            {
                this.Field = ((string)(value));
                return;
            }
            if ((feature == "SUBFIELD"))
            {
                this.SubField = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FIELD"))
            {
                return new FieldProxy(this);
            }
            if ((attribute == "SUBFIELD"))
            {
                return new SubFieldProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._addresses))
            {
                return "addresses";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//AddressSwitch")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AddressSwitch class
        /// </summary>
        public class AddressSwitchChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AddressSwitch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AddressSwitchChildrenCollection(AddressSwitch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Addresses.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Addresses.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Addresses.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISwitchedAddress addressesCasted = item.As<ISwitchedAddress>();
                if ((addressesCasted != null))
                {
                    this._parent.Addresses.Add(addressesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Addresses.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Addresses.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> addressesEnumerator = this._parent.Addresses.GetEnumerator();
                try
                {
                    for (
                    ; addressesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = addressesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    addressesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISwitchedAddress switchedAddressItem = item.As<ISwitchedAddress>();
                if (((switchedAddressItem != null) 
                            && this._parent.Addresses.Remove(switchedAddressItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Addresses).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AddressSwitch class
        /// </summary>
        public class AddressSwitchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AddressSwitch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AddressSwitchReferencedElementsCollection(AddressSwitch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Addresses.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Addresses.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Addresses.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISwitchedAddress addressesCasted = item.As<ISwitchedAddress>();
                if ((addressesCasted != null))
                {
                    this._parent.Addresses.Add(addressesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Addresses.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Addresses.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> addressesEnumerator = this._parent.Addresses.GetEnumerator();
                try
                {
                    for (
                    ; addressesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = addressesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    addressesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISwitchedAddress switchedAddressItem = item.As<ISwitchedAddress>();
                if (((switchedAddressItem != null) 
                            && this._parent.Addresses.Remove(switchedAddressItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Addresses).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the field property
        /// </summary>
        private sealed class FieldProxy : ModelPropertyChange<IAddressSwitch, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FieldProxy(IAddressSwitch modelElement) : 
                    base(modelElement, "field")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Field;
                }
                set
                {
                    this.ModelElement.Field = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subField property
        /// </summary>
        private sealed class SubFieldProxy : ModelPropertyChange<IAddressSwitch, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubFieldProxy(IAddressSwitch modelElement) : 
                    base(modelElement, "subField")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SubField;
                }
                set
                {
                    this.ModelElement.SubField = value;
                }
            }
        }
    }
}

