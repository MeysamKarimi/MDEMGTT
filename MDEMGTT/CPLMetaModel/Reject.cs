//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.CPL
{
    
    
    /// <summary>
    /// The default implementation of the Reject class
    /// </summary>
    [XmlNamespaceAttribute("http://cpl/1.0")]
    [XmlNamespacePrefixAttribute("CPL")]
    [ModelRepresentationClassAttribute("http://cpl/1.0#//Reject")]
    public partial class Reject : SignallingAction, IReject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _status;
        
        private static Lazy<ITypedElement> _statusAttribute = new Lazy<ITypedElement>(RetrieveStatusAttribute);
        
        /// <summary>
        /// The backing field for the Reason property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _reason;
        
        private static Lazy<ITypedElement> _reasonAttribute = new Lazy<ITypedElement>(RetrieveReasonAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The status property
        /// </summary>
        [DisplayNameAttribute("status")]
        [CategoryAttribute("Reject")]
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    string old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusAttribute);
                    this._status = value;
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reason property
        /// </summary>
        [DisplayNameAttribute("reason")]
        [CategoryAttribute("Reject")]
        [XmlElementNameAttribute("reason")]
        [XmlAttributeAttribute(true)]
        public string Reason
        {
            get
            {
                return this._reason;
            }
            set
            {
                if ((this._reason != value))
                {
                    string old = this._reason;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReasonChanging(e);
                    this.OnPropertyChanging("Reason", e, _reasonAttribute);
                    this._reason = value;
                    this.OnReasonChanged(e);
                    this.OnPropertyChanged("Reason", e, _reasonAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//Reject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the Reason property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReasonChanging;
        
        /// <summary>
        /// Gets fired when the Reason property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReasonChanged;
        
        private static ITypedElement RetrieveStatusAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Reject.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReasonAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Reject.ClassInstance)).Resolve("reason")));
        }
        
        /// <summary>
        /// Raises the ReasonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReasonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReasonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReasonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReasonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReasonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STATUS"))
            {
                return this.Status;
            }
            if ((attribute == "REASON"))
            {
                return this.Reason;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((string)(value));
                return;
            }
            if ((feature == "REASON"))
            {
                this.Reason = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "STATUS"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "REASON"))
            {
                return new ReasonProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//Reject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IReject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IReject modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reason property
        /// </summary>
        private sealed class ReasonProxy : ModelPropertyChange<IReject, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReasonProxy(IReject modelElement) : 
                    base(modelElement, "reason")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Reason;
                }
                set
                {
                    this.ModelElement.Reason = value;
                }
            }
        }
    }
}

