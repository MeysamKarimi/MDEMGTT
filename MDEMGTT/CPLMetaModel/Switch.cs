//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.CPL
{
    
    
    /// <summary>
    /// The default implementation of the Switch class
    /// </summary>
    [XmlNamespaceAttribute("http://cpl/1.0")]
    [XmlNamespacePrefixAttribute("CPL")]
    [ModelRepresentationClassAttribute("http://cpl/1.0#//Switch")]
    public abstract partial class Switch : Node, ISwitch, IModelElement
    {
        
        private static Lazy<ITypedElement> _notPresentReference = new Lazy<ITypedElement>(RetrieveNotPresentReference);
        
        /// <summary>
        /// The backing field for the NotPresent property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private INotPresent _notPresent;
        
        private static Lazy<ITypedElement> _otherwiseReference = new Lazy<ITypedElement>(RetrieveOtherwiseReference);
        
        /// <summary>
        /// The backing field for the Otherwise property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IOtherwise _otherwise;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The notPresent property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("notPresent")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public INotPresent NotPresent
        {
            get
            {
                return this._notPresent;
            }
            set
            {
                if ((this._notPresent != value))
                {
                    INotPresent old = this._notPresent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNotPresentChanging(e);
                    this.OnPropertyChanging("NotPresent", e, _notPresentReference);
                    this._notPresent = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetNotPresent;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetNotPresent;
                    }
                    this.OnNotPresentChanged(e);
                    this.OnPropertyChanged("NotPresent", e, _notPresentReference);
                }
            }
        }
        
        /// <summary>
        /// The otherwise property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("otherwise")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IOtherwise Otherwise
        {
            get
            {
                return this._otherwise;
            }
            set
            {
                if ((this._otherwise != value))
                {
                    IOtherwise old = this._otherwise;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOtherwiseChanging(e);
                    this.OnPropertyChanging("Otherwise", e, _otherwiseReference);
                    this._otherwise = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetOtherwise;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetOtherwise;
                    }
                    this.OnOtherwiseChanged(e);
                    this.OnPropertyChanged("Otherwise", e, _otherwiseReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SwitchChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SwitchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//Switch")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NotPresent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NotPresentChanging;
        
        /// <summary>
        /// Gets fired when the NotPresent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NotPresentChanged;
        
        /// <summary>
        /// Gets fired before the Otherwise property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OtherwiseChanging;
        
        /// <summary>
        /// Gets fired when the Otherwise property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OtherwiseChanged;
        
        private static ITypedElement RetrieveNotPresentReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Switch.ClassInstance)).Resolve("notPresent")));
        }
        
        /// <summary>
        /// Raises the NotPresentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNotPresentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NotPresentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NotPresentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNotPresentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NotPresentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NotPresent property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNotPresent(object sender, System.EventArgs eventArgs)
        {
            this.NotPresent = null;
        }
        
        private static ITypedElement RetrieveOtherwiseReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.Switch.ClassInstance)).Resolve("otherwise")));
        }
        
        /// <summary>
        /// Raises the OtherwiseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOtherwiseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OtherwiseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OtherwiseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOtherwiseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OtherwiseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Otherwise property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOtherwise(object sender, System.EventArgs eventArgs)
        {
            this.Otherwise = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.NotPresent))
            {
                return ModelHelper.CreatePath("NotPresent");
            }
            if ((element == this.Otherwise))
            {
                return ModelHelper.CreatePath("Otherwise");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "NOTPRESENT"))
            {
                return this.NotPresent;
            }
            if ((reference == "OTHERWISE"))
            {
                return this.Otherwise;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NOTPRESENT"))
            {
                this.NotPresent = ((INotPresent)(value));
                return;
            }
            if ((feature == "OTHERWISE"))
            {
                this.Otherwise = ((IOtherwise)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "NOTPRESENT"))
            {
                return new NotPresentProxy(this);
            }
            if ((reference == "OTHERWISE"))
            {
                return new OtherwiseProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//Switch")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Switch class
        /// </summary>
        public class SwitchChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Switch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SwitchChildrenCollection(Switch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.NotPresent != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Otherwise != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NotPresentChanged += this.PropagateValueChanges;
                this._parent.OtherwiseChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NotPresentChanged -= this.PropagateValueChanges;
                this._parent.OtherwiseChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.NotPresent == null))
                {
                    INotPresent notPresentCasted = item.As<INotPresent>();
                    if ((notPresentCasted != null))
                    {
                        this._parent.NotPresent = notPresentCasted;
                        return;
                    }
                }
                if ((this._parent.Otherwise == null))
                {
                    IOtherwise otherwiseCasted = item.As<IOtherwise>();
                    if ((otherwiseCasted != null))
                    {
                        this._parent.Otherwise = otherwiseCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NotPresent = null;
                this._parent.Otherwise = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.NotPresent))
                {
                    return true;
                }
                if ((item == this._parent.Otherwise))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.NotPresent != null))
                {
                    array[arrayIndex] = this._parent.NotPresent;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Otherwise != null))
                {
                    array[arrayIndex] = this._parent.Otherwise;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.NotPresent == item))
                {
                    this._parent.NotPresent = null;
                    return true;
                }
                if ((this._parent.Otherwise == item))
                {
                    this._parent.Otherwise = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NotPresent).Concat(this._parent.Otherwise).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Switch class
        /// </summary>
        public class SwitchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Switch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SwitchReferencedElementsCollection(Switch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.NotPresent != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Otherwise != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NotPresentChanged += this.PropagateValueChanges;
                this._parent.OtherwiseChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NotPresentChanged -= this.PropagateValueChanges;
                this._parent.OtherwiseChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.NotPresent == null))
                {
                    INotPresent notPresentCasted = item.As<INotPresent>();
                    if ((notPresentCasted != null))
                    {
                        this._parent.NotPresent = notPresentCasted;
                        return;
                    }
                }
                if ((this._parent.Otherwise == null))
                {
                    IOtherwise otherwiseCasted = item.As<IOtherwise>();
                    if ((otherwiseCasted != null))
                    {
                        this._parent.Otherwise = otherwiseCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NotPresent = null;
                this._parent.Otherwise = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.NotPresent))
                {
                    return true;
                }
                if ((item == this._parent.Otherwise))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.NotPresent != null))
                {
                    array[arrayIndex] = this._parent.NotPresent;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Otherwise != null))
                {
                    array[arrayIndex] = this._parent.Otherwise;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.NotPresent == item))
                {
                    this._parent.NotPresent = null;
                    return true;
                }
                if ((this._parent.Otherwise == item))
                {
                    this._parent.Otherwise = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NotPresent).Concat(this._parent.Otherwise).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the notPresent property
        /// </summary>
        private sealed class NotPresentProxy : ModelPropertyChange<ISwitch, INotPresent>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NotPresentProxy(ISwitch modelElement) : 
                    base(modelElement, "notPresent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override INotPresent Value
            {
                get
                {
                    return this.ModelElement.NotPresent;
                }
                set
                {
                    this.ModelElement.NotPresent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the otherwise property
        /// </summary>
        private sealed class OtherwiseProxy : ModelPropertyChange<ISwitch, IOtherwise>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OtherwiseProxy(ISwitch modelElement) : 
                    base(modelElement, "otherwise")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOtherwise Value
            {
                get
                {
                    return this.ModelElement.Otherwise;
                }
                set
                {
                    this.ModelElement.Otherwise = value;
                }
            }
        }
    }
}

