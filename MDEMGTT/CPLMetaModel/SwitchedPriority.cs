//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.CPL
{
    
    
    /// <summary>
    /// The default implementation of the SwitchedPriority class
    /// </summary>
    [XmlNamespaceAttribute("http://cpl/1.0")]
    [XmlNamespacePrefixAttribute("CPL")]
    [ModelRepresentationClassAttribute("http://cpl/1.0#//SwitchedPriority")]
    public partial class SwitchedPriority : NodeContainer, ISwitchedPriority, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Less property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _less;
        
        private static Lazy<ITypedElement> _lessAttribute = new Lazy<ITypedElement>(RetrieveLessAttribute);
        
        /// <summary>
        /// The backing field for the Greater property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _greater;
        
        private static Lazy<ITypedElement> _greaterAttribute = new Lazy<ITypedElement>(RetrieveGreaterAttribute);
        
        /// <summary>
        /// The backing field for the Equal property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _equal;
        
        private static Lazy<ITypedElement> _equalAttribute = new Lazy<ITypedElement>(RetrieveEqualAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The less property
        /// </summary>
        [DisplayNameAttribute("less")]
        [CategoryAttribute("SwitchedPriority")]
        [XmlElementNameAttribute("less")]
        [XmlAttributeAttribute(true)]
        public string Less
        {
            get
            {
                return this._less;
            }
            set
            {
                if ((this._less != value))
                {
                    string old = this._less;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLessChanging(e);
                    this.OnPropertyChanging("Less", e, _lessAttribute);
                    this._less = value;
                    this.OnLessChanged(e);
                    this.OnPropertyChanged("Less", e, _lessAttribute);
                }
            }
        }
        
        /// <summary>
        /// The greater property
        /// </summary>
        [DisplayNameAttribute("greater")]
        [CategoryAttribute("SwitchedPriority")]
        [XmlElementNameAttribute("greater")]
        [XmlAttributeAttribute(true)]
        public string Greater
        {
            get
            {
                return this._greater;
            }
            set
            {
                if ((this._greater != value))
                {
                    string old = this._greater;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGreaterChanging(e);
                    this.OnPropertyChanging("Greater", e, _greaterAttribute);
                    this._greater = value;
                    this.OnGreaterChanged(e);
                    this.OnPropertyChanged("Greater", e, _greaterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The equal property
        /// </summary>
        [DisplayNameAttribute("equal")]
        [CategoryAttribute("SwitchedPriority")]
        [XmlElementNameAttribute("equal")]
        [XmlAttributeAttribute(true)]
        public string Equal
        {
            get
            {
                return this._equal;
            }
            set
            {
                if ((this._equal != value))
                {
                    string old = this._equal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEqualChanging(e);
                    this.OnPropertyChanging("Equal", e, _equalAttribute);
                    this._equal = value;
                    this.OnEqualChanged(e);
                    this.OnPropertyChanged("Equal", e, _equalAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//SwitchedPriority")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Less property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LessChanging;
        
        /// <summary>
        /// Gets fired when the Less property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LessChanged;
        
        /// <summary>
        /// Gets fired before the Greater property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GreaterChanging;
        
        /// <summary>
        /// Gets fired when the Greater property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GreaterChanged;
        
        /// <summary>
        /// Gets fired before the Equal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EqualChanging;
        
        /// <summary>
        /// Gets fired when the Equal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EqualChanged;
        
        private static ITypedElement RetrieveLessAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedPriority.ClassInstance)).Resolve("less")));
        }
        
        /// <summary>
        /// Raises the LessChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLessChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LessChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LessChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLessChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LessChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGreaterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedPriority.ClassInstance)).Resolve("greater")));
        }
        
        /// <summary>
        /// Raises the GreaterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGreaterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GreaterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GreaterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGreaterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GreaterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEqualAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.CPL.SwitchedPriority.ClassInstance)).Resolve("equal")));
        }
        
        /// <summary>
        /// Raises the EqualChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEqualChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EqualChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EqualChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEqualChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EqualChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LESS"))
            {
                return this.Less;
            }
            if ((attribute == "GREATER"))
            {
                return this.Greater;
            }
            if ((attribute == "EQUAL"))
            {
                return this.Equal;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LESS"))
            {
                this.Less = ((string)(value));
                return;
            }
            if ((feature == "GREATER"))
            {
                this.Greater = ((string)(value));
                return;
            }
            if ((feature == "EQUAL"))
            {
                this.Equal = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "LESS"))
            {
                return new LessProxy(this);
            }
            if ((attribute == "GREATER"))
            {
                return new GreaterProxy(this);
            }
            if ((attribute == "EQUAL"))
            {
                return new EqualProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://cpl/1.0#//SwitchedPriority")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the less property
        /// </summary>
        private sealed class LessProxy : ModelPropertyChange<ISwitchedPriority, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LessProxy(ISwitchedPriority modelElement) : 
                    base(modelElement, "less")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Less;
                }
                set
                {
                    this.ModelElement.Less = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the greater property
        /// </summary>
        private sealed class GreaterProxy : ModelPropertyChange<ISwitchedPriority, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GreaterProxy(ISwitchedPriority modelElement) : 
                    base(modelElement, "greater")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Greater;
                }
                set
                {
                    this.ModelElement.Greater = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the equal property
        /// </summary>
        private sealed class EqualProxy : ModelPropertyChange<ISwitchedPriority, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EqualProxy(ISwitchedPriority modelElement) : 
                    base(modelElement, "equal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Equal;
                }
                set
                {
                    this.ModelElement.Equal = value;
                }
            }
        }
    }
}

