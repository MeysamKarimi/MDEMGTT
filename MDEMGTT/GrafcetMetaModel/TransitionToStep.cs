//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.Grafcet
{
    
    
    /// <summary>
    /// The default implementation of the TransitionToStep class
    /// </summary>
    [XmlNamespaceAttribute("http://grafcet/1.0")]
    [XmlNamespacePrefixAttribute("grafcet")]
    [ModelRepresentationClassAttribute("http://grafcet/1.0#//TransitionToStep")]
    [DebuggerDisplayAttribute("TransitionToStep {Name}")]
    public partial class TransitionToStep : Connection, ITransitionToStep, IModelElement
    {
        
        private static Lazy<ITypedElement> _fromReference = new Lazy<ITypedElement>(RetrieveFromReference);
        
        /// <summary>
        /// The backing field for the From property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITransition _from;
        
        private static Lazy<ITypedElement> _toReference = new Lazy<ITypedElement>(RetrieveToReference);
        
        /// <summary>
        /// The backing field for the To property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IStep _to;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The from property
        /// </summary>
        [DisplayNameAttribute("from")]
        [CategoryAttribute("TransitionToStep")]
        [XmlElementNameAttribute("from")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("outgoingConnections")]
        public ITransition From
        {
            get
            {
                return this._from;
            }
            set
            {
                if ((this._from != value))
                {
                    ITransition old = this._from;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromChanging(e);
                    this.OnPropertyChanging("From", e, _fromReference);
                    this._from = value;
                    if ((old != null))
                    {
                        old.OutgoingConnections.Remove(this);
                        old.Deleted -= this.OnResetFrom;
                    }
                    if ((value != null))
                    {
                        value.OutgoingConnections.Add(this);
                        value.Deleted += this.OnResetFrom;
                    }
                    this.OnFromChanged(e);
                    this.OnPropertyChanged("From", e, _fromReference);
                }
            }
        }
        
        /// <summary>
        /// The to property
        /// </summary>
        [DisplayNameAttribute("to")]
        [CategoryAttribute("TransitionToStep")]
        [XmlElementNameAttribute("to")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("incomingConnections")]
        public IStep To
        {
            get
            {
                return this._to;
            }
            set
            {
                if ((this._to != value))
                {
                    IStep old = this._to;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnToChanging(e);
                    this.OnPropertyChanging("To", e, _toReference);
                    this._to = value;
                    if ((old != null))
                    {
                        old.IncomingConnections.Remove(this);
                        old.Deleted -= this.OnResetTo;
                    }
                    if ((value != null))
                    {
                        value.IncomingConnections.Add(this);
                        value.Deleted += this.OnResetTo;
                    }
                    this.OnToChanged(e);
                    this.OnPropertyChanged("To", e, _toReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransitionToStepReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://grafcet/1.0#//TransitionToStep")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the From property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromChanging;
        
        /// <summary>
        /// Gets fired when the From property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromChanged;
        
        /// <summary>
        /// Gets fired before the To property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToChanging;
        
        /// <summary>
        /// Gets fired when the To property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToChanged;
        
        private static ITypedElement RetrieveFromReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.Grafcet.TransitionToStep.ClassInstance)).Resolve("from")));
        }
        
        /// <summary>
        /// Raises the FromChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the From property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFrom(object sender, System.EventArgs eventArgs)
        {
            this.From = null;
        }
        
        private static ITypedElement RetrieveToReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.Grafcet.TransitionToStep.ClassInstance)).Resolve("to")));
        }
        
        /// <summary>
        /// Raises the ToChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ToChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the To property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTo(object sender, System.EventArgs eventArgs)
        {
            this.To = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FROM"))
            {
                return this.From;
            }
            if ((reference == "TO"))
            {
                return this.To;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FROM"))
            {
                this.From = ((ITransition)(value));
                return;
            }
            if ((feature == "TO"))
            {
                this.To = ((IStep)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FROM"))
            {
                return new FromProxy(this);
            }
            if ((reference == "TO"))
            {
                return new ToProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://grafcet/1.0#//TransitionToStep")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TransitionToStep class
        /// </summary>
        public class TransitionToStepReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TransitionToStep _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransitionToStepReferencedElementsCollection(TransitionToStep parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.From != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.To != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FromChanged += this.PropagateValueChanges;
                this._parent.ToChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FromChanged -= this.PropagateValueChanges;
                this._parent.ToChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.From == null))
                {
                    ITransition fromCasted = item.As<ITransition>();
                    if ((fromCasted != null))
                    {
                        this._parent.From = fromCasted;
                        return;
                    }
                }
                if ((this._parent.To == null))
                {
                    IStep toCasted = item.As<IStep>();
                    if ((toCasted != null))
                    {
                        this._parent.To = toCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.From = null;
                this._parent.To = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.From))
                {
                    return true;
                }
                if ((item == this._parent.To))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.From != null))
                {
                    array[arrayIndex] = this._parent.From;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.To != null))
                {
                    array[arrayIndex] = this._parent.To;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.From == item))
                {
                    this._parent.From = null;
                    return true;
                }
                if ((this._parent.To == item))
                {
                    this._parent.To = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.From).Concat(this._parent.To).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the from property
        /// </summary>
        private sealed class FromProxy : ModelPropertyChange<ITransitionToStep, ITransition>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromProxy(ITransitionToStep modelElement) : 
                    base(modelElement, "from")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransition Value
            {
                get
                {
                    return this.ModelElement.From;
                }
                set
                {
                    this.ModelElement.From = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the to property
        /// </summary>
        private sealed class ToProxy : ModelPropertyChange<ITransitionToStep, IStep>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ToProxy(ITransitionToStep modelElement) : 
                    base(modelElement, "to")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStep Value
            {
                get
                {
                    return this.ModelElement.To;
                }
                set
                {
                    this.ModelElement.To = value;
                }
            }
        }
    }
}

