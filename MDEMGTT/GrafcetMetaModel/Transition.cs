//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.Grafcet
{
    
    
    /// <summary>
    /// The default implementation of the Transition class
    /// </summary>
    [XmlNamespaceAttribute("http://grafcet/1.0")]
    [XmlNamespacePrefixAttribute("grafcet")]
    [ModelRepresentationClassAttribute("http://grafcet/1.0#//Transition")]
    [DebuggerDisplayAttribute("Transition {Name}")]
    public partial class Transition : Element, ITransition, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Condition property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _condition;
        
        private static Lazy<ITypedElement> _conditionAttribute = new Lazy<ITypedElement>(RetrieveConditionAttribute);
        
        private static Lazy<ITypedElement> _incomingConnectionsReference = new Lazy<ITypedElement>(RetrieveIncomingConnectionsReference);
        
        /// <summary>
        /// The backing field for the IncomingConnections property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TransitionIncomingConnectionsCollection _incomingConnections;
        
        private static Lazy<ITypedElement> _outgoingConnectionsReference = new Lazy<ITypedElement>(RetrieveOutgoingConnectionsReference);
        
        /// <summary>
        /// The backing field for the OutgoingConnections property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private TransitionOutgoingConnectionsCollection _outgoingConnections;
        
        private static IClass _classInstance;
        
        public Transition()
        {
            this._incomingConnections = new TransitionIncomingConnectionsCollection(this);
            this._incomingConnections.CollectionChanging += this.IncomingConnectionsCollectionChanging;
            this._incomingConnections.CollectionChanged += this.IncomingConnectionsCollectionChanged;
            this._outgoingConnections = new TransitionOutgoingConnectionsCollection(this);
            this._outgoingConnections.CollectionChanging += this.OutgoingConnectionsCollectionChanging;
            this._outgoingConnections.CollectionChanged += this.OutgoingConnectionsCollectionChanged;
        }
        
        /// <summary>
        /// The condition property
        /// </summary>
        [DisplayNameAttribute("condition")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("condition")]
        [XmlAttributeAttribute(true)]
        public string Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                if ((this._condition != value))
                {
                    string old = this._condition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConditionChanging(e);
                    this.OnPropertyChanging("Condition", e, _conditionAttribute);
                    this._condition = value;
                    this.OnConditionChanged(e);
                    this.OnPropertyChanged("Condition", e, _conditionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The incomingConnections property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("incomingConnections")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("incomingConnections")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("to")]
        [ConstantAttribute()]
        public ISetExpression<IStepToTransition> IncomingConnections
        {
            get
            {
                return this._incomingConnections;
            }
        }
        
        /// <summary>
        /// The outgoingConnections property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("outgoingConnections")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("outgoingConnections")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("from")]
        [ConstantAttribute()]
        public ISetExpression<ITransitionToStep> OutgoingConnections
        {
            get
            {
                return this._outgoingConnections;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransitionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://grafcet/1.0#//Transition")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Condition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConditionChanging;
        
        /// <summary>
        /// Gets fired when the Condition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConditionChanged;
        
        private static ITypedElement RetrieveConditionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.Grafcet.Transition.ClassInstance)).Resolve("condition")));
        }
        
        /// <summary>
        /// Raises the ConditionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConditionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConditionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConditionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConditionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConditionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIncomingConnectionsReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.Grafcet.Transition.ClassInstance)).Resolve("incomingConnections")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the IncomingConnections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncomingConnectionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("IncomingConnections", e, _incomingConnectionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the IncomingConnections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncomingConnectionsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("IncomingConnections", e, _incomingConnectionsReference);
        }
        
        private static ITypedElement RetrieveOutgoingConnectionsReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.Grafcet.Transition.ClassInstance)).Resolve("outgoingConnections")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OutgoingConnections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutgoingConnectionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OutgoingConnections", e, _outgoingConnectionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OutgoingConnections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OutgoingConnectionsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OutgoingConnections", e, _outgoingConnectionsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONDITION"))
            {
                return this.Condition;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INCOMINGCONNECTIONS"))
            {
                return this._incomingConnections;
            }
            if ((feature == "OUTGOINGCONNECTIONS"))
            {
                return this._outgoingConnections;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONDITION"))
            {
                this.Condition = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CONDITION"))
            {
                return new ConditionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://grafcet/1.0#//Transition")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Transition class
        /// </summary>
        public class TransitionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Transition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransitionReferencedElementsCollection(Transition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.IncomingConnections.Count);
                    count = (count + this._parent.OutgoingConnections.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.IncomingConnections.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OutgoingConnections.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.IncomingConnections.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OutgoingConnections.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IStepToTransition incomingConnectionsCasted = item.As<IStepToTransition>();
                if ((incomingConnectionsCasted != null))
                {
                    this._parent.IncomingConnections.Add(incomingConnectionsCasted);
                }
                ITransitionToStep outgoingConnectionsCasted = item.As<ITransitionToStep>();
                if ((outgoingConnectionsCasted != null))
                {
                    this._parent.OutgoingConnections.Add(outgoingConnectionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.IncomingConnections.Clear();
                this._parent.OutgoingConnections.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.IncomingConnections.Contains(item))
                {
                    return true;
                }
                if (this._parent.OutgoingConnections.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> incomingConnectionsEnumerator = this._parent.IncomingConnections.GetEnumerator();
                try
                {
                    for (
                    ; incomingConnectionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = incomingConnectionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    incomingConnectionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> outgoingConnectionsEnumerator = this._parent.OutgoingConnections.GetEnumerator();
                try
                {
                    for (
                    ; outgoingConnectionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = outgoingConnectionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    outgoingConnectionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IStepToTransition stepToTransitionItem = item.As<IStepToTransition>();
                if (((stepToTransitionItem != null) 
                            && this._parent.IncomingConnections.Remove(stepToTransitionItem)))
                {
                    return true;
                }
                ITransitionToStep transitionToStepItem = item.As<ITransitionToStep>();
                if (((transitionToStepItem != null) 
                            && this._parent.OutgoingConnections.Remove(transitionToStepItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.IncomingConnections).Concat(this._parent.OutgoingConnections).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the condition property
        /// </summary>
        private sealed class ConditionProxy : ModelPropertyChange<ITransition, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConditionProxy(ITransition modelElement) : 
                    base(modelElement, "condition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Condition;
                }
                set
                {
                    this.ModelElement.Condition = value;
                }
            }
        }
    }
}

