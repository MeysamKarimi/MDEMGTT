//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.Grafcet
{
    
    
    /// <summary>
    /// The public interface for Step
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Step))]
    [XmlDefaultImplementationTypeAttribute(typeof(Step))]
    [ModelRepresentationClassAttribute("http://grafcet/1.0#//Step")]
    public interface IStep : IModelElement, IElement
    {
        
        /// <summary>
        /// The isInitial property
        /// </summary>
        [DisplayNameAttribute("isInitial")]
        [CategoryAttribute("Step")]
        [XmlElementNameAttribute("isInitial")]
        [XmlAttributeAttribute(true)]
        bool IsInitial
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isActive property
        /// </summary>
        [DisplayNameAttribute("isActive")]
        [CategoryAttribute("Step")]
        [XmlElementNameAttribute("isActive")]
        [XmlAttributeAttribute(true)]
        bool IsActive
        {
            get;
            set;
        }
        
        /// <summary>
        /// The action property
        /// </summary>
        [DisplayNameAttribute("action")]
        [CategoryAttribute("Step")]
        [XmlElementNameAttribute("action")]
        [XmlAttributeAttribute(true)]
        string Action
        {
            get;
            set;
        }
        
        /// <summary>
        /// The incomingConnections property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("incomingConnections")]
        [CategoryAttribute("Step")]
        [XmlElementNameAttribute("incomingConnections")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("to")]
        [ConstantAttribute()]
        ISetExpression<ITransitionToStep> IncomingConnections
        {
            get;
        }
        
        /// <summary>
        /// The outgoingConnections property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("outgoingConnections")]
        [CategoryAttribute("Step")]
        [XmlElementNameAttribute("outgoingConnections")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("from")]
        [ConstantAttribute()]
        ISetExpression<IStepToTransition> OutgoingConnections
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the IsInitial property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsInitialChanging;
        
        /// <summary>
        /// Gets fired when the IsInitial property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsInitialChanged;
        
        /// <summary>
        /// Gets fired before the IsActive property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsActiveChanging;
        
        /// <summary>
        /// Gets fired when the IsActive property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsActiveChanged;
        
        /// <summary>
        /// Gets fired before the Action property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActionChanging;
        
        /// <summary>
        /// Gets fired when the Action property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActionChanged;
    }
}

