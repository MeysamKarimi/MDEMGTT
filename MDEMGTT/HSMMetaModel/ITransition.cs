//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.Hsm
{
    
    
    /// <summary>
    /// The public interface for Transition
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Transition))]
    [XmlDefaultImplementationTypeAttribute(typeof(Transition))]
    [ModelRepresentationClassAttribute("http://hsm/1.0#//Transition")]
    public interface ITransition : IModelElement
    {
        
        /// <summary>
        /// The label property
        /// </summary>
        [DisplayNameAttribute("label")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("label")]
        [XmlAttributeAttribute(true)]
        string Label
        {
            get;
            set;
        }
        
        /// <summary>
        /// The stateMachine property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("stateMachine")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("transitions")]
        IStateMachine StateMachine
        {
            get;
            set;
        }
        
        /// <summary>
        /// The source property
        /// </summary>
        [DisplayNameAttribute("source")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("source")]
        [XmlAttributeAttribute(true)]
        IAbstractState Source
        {
            get;
            set;
        }
        
        /// <summary>
        /// The target property
        /// </summary>
        [DisplayNameAttribute("target")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("target")]
        [XmlAttributeAttribute(true)]
        IAbstractState Target
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Label property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LabelChanging;
        
        /// <summary>
        /// Gets fired when the Label property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LabelChanged;
        
        /// <summary>
        /// Gets fired before the StateMachine property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StateMachineChanging;
        
        /// <summary>
        /// Gets fired when the StateMachine property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StateMachineChanged;
        
        /// <summary>
        /// Gets fired before the Source property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SourceChanging;
        
        /// <summary>
        /// Gets fired when the Source property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SourceChanged;
        
        /// <summary>
        /// Gets fired before the Target property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetChanging;
        
        /// <summary>
        /// Gets fired when the Target property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetChanged;
    }
}

