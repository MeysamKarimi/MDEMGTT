//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace MDEMGTT.Hsm
{
    
    
    /// <summary>
    /// The default implementation of the Transition class
    /// </summary>
    [XmlNamespaceAttribute("http://hsm/1.0")]
    [XmlNamespacePrefixAttribute("hsm")]
    [ModelRepresentationClassAttribute("http://hsm/1.0#//Transition")]
    public partial class Transition : ModelElement, ITransition, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Label property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _label;
        
        private static Lazy<ITypedElement> _labelAttribute = new Lazy<ITypedElement>(RetrieveLabelAttribute);
        
        private static Lazy<ITypedElement> _stateMachineReference = new Lazy<ITypedElement>(RetrieveStateMachineReference);
        
        private static Lazy<ITypedElement> _sourceReference = new Lazy<ITypedElement>(RetrieveSourceReference);
        
        /// <summary>
        /// The backing field for the Source property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAbstractState _source;
        
        private static Lazy<ITypedElement> _targetReference = new Lazy<ITypedElement>(RetrieveTargetReference);
        
        /// <summary>
        /// The backing field for the Target property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IAbstractState _target;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The label property
        /// </summary>
        [DisplayNameAttribute("label")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("label")]
        [XmlAttributeAttribute(true)]
        public string Label
        {
            get
            {
                return this._label;
            }
            set
            {
                if ((this._label != value))
                {
                    string old = this._label;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLabelChanging(e);
                    this.OnPropertyChanging("Label", e, _labelAttribute);
                    this._label = value;
                    this.OnLabelChanged(e);
                    this.OnPropertyChanged("Label", e, _labelAttribute);
                }
            }
        }
        
        /// <summary>
        /// The stateMachine property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("stateMachine")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("transitions")]
        public IStateMachine StateMachine
        {
            get
            {
                return ModelHelper.CastAs<IStateMachine>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The source property
        /// </summary>
        [DisplayNameAttribute("source")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("source")]
        [XmlAttributeAttribute(true)]
        public IAbstractState Source
        {
            get
            {
                return this._source;
            }
            set
            {
                if ((this._source != value))
                {
                    IAbstractState old = this._source;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSourceChanging(e);
                    this.OnPropertyChanging("Source", e, _sourceReference);
                    this._source = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSource;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSource;
                    }
                    this.OnSourceChanged(e);
                    this.OnPropertyChanged("Source", e, _sourceReference);
                }
            }
        }
        
        /// <summary>
        /// The target property
        /// </summary>
        [DisplayNameAttribute("target")]
        [CategoryAttribute("Transition")]
        [XmlElementNameAttribute("target")]
        [XmlAttributeAttribute(true)]
        public IAbstractState Target
        {
            get
            {
                return this._target;
            }
            set
            {
                if ((this._target != value))
                {
                    IAbstractState old = this._target;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetChanging(e);
                    this.OnPropertyChanging("Target", e, _targetReference);
                    this._target = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTarget;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTarget;
                    }
                    this.OnTargetChanged(e);
                    this.OnPropertyChanged("Target", e, _targetReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransitionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://hsm/1.0#//Transition")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Label property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LabelChanging;
        
        /// <summary>
        /// Gets fired when the Label property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LabelChanged;
        
        /// <summary>
        /// Gets fired before the StateMachine property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StateMachineChanging;
        
        /// <summary>
        /// Gets fired when the StateMachine property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StateMachineChanged;
        
        /// <summary>
        /// Gets fired before the Source property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceChanging;
        
        /// <summary>
        /// Gets fired when the Source property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SourceChanged;
        
        /// <summary>
        /// Gets fired before the Target property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetChanging;
        
        /// <summary>
        /// Gets fired when the Target property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetChanged;
        
        private static ITypedElement RetrieveLabelAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.Hsm.Transition.ClassInstance)).Resolve("label")));
        }
        
        /// <summary>
        /// Raises the LabelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLabelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LabelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LabelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLabelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LabelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStateMachineReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.Hsm.Transition.ClassInstance)).Resolve("stateMachine")));
        }
        
        /// <summary>
        /// Raises the StateMachineChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStateMachineChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StateMachineChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IStateMachine oldStateMachine = ModelHelper.CastAs<IStateMachine>(oldParent);
            IStateMachine newStateMachine = ModelHelper.CastAs<IStateMachine>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldStateMachine, newStateMachine);
            this.OnStateMachineChanging(e);
            this.OnPropertyChanging("StateMachine", e, _stateMachineReference);
        }
        
        /// <summary>
        /// Raises the StateMachineChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStateMachineChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StateMachineChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IStateMachine oldStateMachine = ModelHelper.CastAs<IStateMachine>(oldParent);
            IStateMachine newStateMachine = ModelHelper.CastAs<IStateMachine>(newParent);
            if ((oldStateMachine != null))
            {
                oldStateMachine.Transitions.Remove(this);
            }
            if ((newStateMachine != null))
            {
                newStateMachine.Transitions.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldStateMachine, newStateMachine);
            this.OnStateMachineChanged(e);
            this.OnPropertyChanged("StateMachine", e, _stateMachineReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveSourceReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.Hsm.Transition.ClassInstance)).Resolve("source")));
        }
        
        /// <summary>
        /// Raises the SourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Source property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSource(object sender, System.EventArgs eventArgs)
        {
            this.Source = null;
        }
        
        private static ITypedElement RetrieveTargetReference()
        {
            return ((ITypedElement)(((ModelElement)(MDEMGTT.Hsm.Transition.ClassInstance)).Resolve("target")));
        }
        
        /// <summary>
        /// Raises the TargetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Target property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTarget(object sender, System.EventArgs eventArgs)
        {
            this.Target = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "STATEMACHINE"))
            {
                return this.StateMachine;
            }
            if ((reference == "SOURCE"))
            {
                return this.Source;
            }
            if ((reference == "TARGET"))
            {
                return this.Target;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LABEL"))
            {
                return this.Label;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATEMACHINE"))
            {
                this.StateMachine = ((IStateMachine)(value));
                return;
            }
            if ((feature == "SOURCE"))
            {
                this.Source = ((IAbstractState)(value));
                return;
            }
            if ((feature == "TARGET"))
            {
                this.Target = ((IAbstractState)(value));
                return;
            }
            if ((feature == "LABEL"))
            {
                this.Label = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "LABEL"))
            {
                return new LabelProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "STATEMACHINE"))
            {
                return new StateMachineProxy(this);
            }
            if ((reference == "SOURCE"))
            {
                return new SourceProxy(this);
            }
            if ((reference == "TARGET"))
            {
                return new TargetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://hsm/1.0#//Transition")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Transition class
        /// </summary>
        public class TransitionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Transition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransitionReferencedElementsCollection(Transition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.StateMachine != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Source != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Target != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StateMachineChanged += this.PropagateValueChanges;
                this._parent.SourceChanged += this.PropagateValueChanges;
                this._parent.TargetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StateMachineChanged -= this.PropagateValueChanges;
                this._parent.SourceChanged -= this.PropagateValueChanges;
                this._parent.TargetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.StateMachine == null))
                {
                    IStateMachine stateMachineCasted = item.As<IStateMachine>();
                    if ((stateMachineCasted != null))
                    {
                        this._parent.StateMachine = stateMachineCasted;
                        return;
                    }
                }
                if ((this._parent.Source == null))
                {
                    IAbstractState sourceCasted = item.As<IAbstractState>();
                    if ((sourceCasted != null))
                    {
                        this._parent.Source = sourceCasted;
                        return;
                    }
                }
                if ((this._parent.Target == null))
                {
                    IAbstractState targetCasted = item.As<IAbstractState>();
                    if ((targetCasted != null))
                    {
                        this._parent.Target = targetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.StateMachine = null;
                this._parent.Source = null;
                this._parent.Target = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.StateMachine))
                {
                    return true;
                }
                if ((item == this._parent.Source))
                {
                    return true;
                }
                if ((item == this._parent.Target))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.StateMachine != null))
                {
                    array[arrayIndex] = this._parent.StateMachine;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Source != null))
                {
                    array[arrayIndex] = this._parent.Source;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Target != null))
                {
                    array[arrayIndex] = this._parent.Target;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.StateMachine == item))
                {
                    this._parent.StateMachine = null;
                    return true;
                }
                if ((this._parent.Source == item))
                {
                    this._parent.Source = null;
                    return true;
                }
                if ((this._parent.Target == item))
                {
                    this._parent.Target = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.StateMachine).Concat(this._parent.Source).Concat(this._parent.Target).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the label property
        /// </summary>
        private sealed class LabelProxy : ModelPropertyChange<ITransition, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LabelProxy(ITransition modelElement) : 
                    base(modelElement, "label")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Label;
                }
                set
                {
                    this.ModelElement.Label = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stateMachine property
        /// </summary>
        private sealed class StateMachineProxy : ModelPropertyChange<ITransition, IStateMachine>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StateMachineProxy(ITransition modelElement) : 
                    base(modelElement, "stateMachine")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStateMachine Value
            {
                get
                {
                    return this.ModelElement.StateMachine;
                }
                set
                {
                    this.ModelElement.StateMachine = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the source property
        /// </summary>
        private sealed class SourceProxy : ModelPropertyChange<ITransition, IAbstractState>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SourceProxy(ITransition modelElement) : 
                    base(modelElement, "source")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractState Value
            {
                get
                {
                    return this.ModelElement.Source;
                }
                set
                {
                    this.ModelElement.Source = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the target property
        /// </summary>
        private sealed class TargetProxy : ModelPropertyChange<ITransition, IAbstractState>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetProxy(ITransition modelElement) : 
                    base(modelElement, "target")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractState Value
            {
                get
                {
                    return this.ModelElement.Target;
                }
                set
                {
                    this.ModelElement.Target = value;
                }
            }
        }
    }
}

